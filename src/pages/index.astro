---
import PlotFigure from "../components/PlotFigure.astro";
import Layout from "../layouts/Layout.astro";
import departements from "../assets/departements.geojson.json";
import CarteMedecins from "../components/Carte_Medecins.astro";
import GraphIST from "../components/Graph_IST.astro";
import Graph_APL from "../components/Graph_APL.astro";
import Graph_Vaccin from "../components/Graph_Vaccin.astro";
import Figure_Medecins from "../components/Figure_Medecins.astro";
import GraphRing from "../components/Graph_Ring.astro";

// Get search from URL
const url = new URL(Astro.request.url);
const search = url.searchParams.get('search') || '';

// Intermediate variables - defaults
let communeCode = "59350"; // Lille by default
let departementCode = "59";
let communeName = "Lille";

// If there's a search, fetch the commune
if (search && search.trim().length > 0) {
  try {
    const apiResponse = await fetch(
      `https://geo.api.gouv.fr/communes?nom=${encodeURIComponent(search.trim())}&fields=nom,code,codesPostaux,departement&boost=population&limit=1`
    );
    const communes = await apiResponse.json();
    
    if (communes && communes.length > 0) {
      const selectedCommune = communes[0];
      communeCode = selectedCommune.code;
      communeName = selectedCommune.nom;
      departementCode = selectedCommune.departement?.code || "59";
    }
  } catch (error) {
    console.error("Error fetching commune:", error);
  }
}
---

<Layout>
  <div class="flex gap-4">
    <div class="grid grid-cols-3 gap-4 *:h-fill grow-3">
      <div class="card col-span-2 ">
          <GraphRing Code_Dpt={departementCode} />
      </div>
      <div class="card">
        <Figure_Medecins Code_Commune={communeCode} />
      </div>
      <div class="card col-span-3">
        <Graph_APL Code_Commune={communeCode} />
      </div>
      <div class="card ">
        <Graph_APL Code_Commune={communeCode} />
      </div>
      <div class="card col-span-2">
        <GraphIST Code_Dpt={departementCode} />
      </div>
    </div>
    <div>
      <form method="get" action="/" class="*:mx-2 *:rounded-lg mb-4">
        <input 
          id="search-input"
          name="search"
          type="text"
          value={search}
          placeholder="Nom de la commune..."
          class="bg-(--color-white) text-black px-3 py-2"
          autocomplete="off"
        />
        <button type="submit" class="p-2 bg-(--color-black)">Rechercher</button>
        <div id="suggestions" class="hidden mt-2 bg-(--color-black) rounded-lg max-h-60 overflow-y-auto"></div>
      </form>
      <CarteMedecins />
    </div>
  </div>
</Layout>

<script>
  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const suggestionsDiv = document.getElementById('suggestions') as HTMLDivElement;
  const searchForm = searchInput.form as HTMLFormElement;
  
  let debounceTimer: number;

  async function showSuggestions(query: string) {
    if (query.length < 2) {
      suggestionsDiv.classList.add('hidden');
      return;
    }

    try {
      const response = await fetch(
        `https://geo.api.gouv.fr/communes?nom=${encodeURIComponent(query)}&fields=nom,code,codesPostaux,departement&boost=population&limit=5`
      );
      const communes = await response.json();

      if (communes.length > 0) {
        suggestionsDiv.innerHTML = communes
          .map((commune: any) => `
            <div class="suggestion-item px-4 py-2 hover:bg-gray-800 cursor-pointer border-b border-gray-700 last:border-0" 
                 data-nom="${commune.nom}">
              <div class="font-semibold">${commune.nom}</div>
              <div class="text-sm text-gray-400">${commune.codesPostaux?.[0] || ''} - ${commune.departement?.nom || ''}</div>
            </div>
          `)
          .join('');
        suggestionsDiv.classList.remove('hidden');

        document.querySelectorAll('.suggestion-item').forEach((item) => {
          item.addEventListener('click', () => {
            const nom = item.getAttribute('data-nom');
            if (nom) {
              searchInput.value = nom;
              searchForm.submit();
            }
          });
        });
      } else {
        suggestionsDiv.classList.add('hidden');
      }
    } catch (error) {
      console.error('Error fetching suggestions:', error);
      suggestionsDiv.classList.add('hidden');
    }
  }

  searchInput.addEventListener('input', (e) => {
    clearTimeout(debounceTimer);
    const query = (e.target as HTMLInputElement).value;
    debounceTimer = window.setTimeout(() => showSuggestions(query), 300);
  });

  document.addEventListener('click', (e) => {
    if (!searchInput.contains(e.target as Node) && !suggestionsDiv.contains(e.target as Node)) {
      suggestionsDiv.classList.add('hidden');
    }
  });
  
  searchForm.addEventListener('submit', (e) => {
    const value = searchInput.value.trim();
    if (!value) {
      e.preventDefault();
    }
  });
</script>

<style>
  :global(svg g[aria-label^="tip"] text) {
    fill: black !important;
  }
  
  #suggestions {
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
  }
</style>